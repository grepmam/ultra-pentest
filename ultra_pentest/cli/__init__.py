# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os

import click
from click.core import Context

from ultra_pentest.zap import ZAPManager
from ultra_pentest.cli.start import start_zap_daemon
from ultra_pentest.cli.shutdown import shutdown_zap_daemon
from ultra_pentest.cli.status import check_status
from ultra_pentest.cli.reports import report_group
from ultra_pentest.cli.pscanners import show_passive_scanners
from ultra_pentest.cli.ascanners import show_active_scanners
from ultra_pentest.cli.policies import show_policies
from ultra_pentest.cli.run import run_attack
from ultra_pentest import __version__


@click.group(
    help=f'Ultra Pentest v{__version__} - A tool for performing website security testing.',
)
@click.option(
    '--zap-executable',
    default='/zap',
    envvar='ZAP_EXECUTABLE',
    type=str,
    help=(
        'Path to the ZAP daemon. Defaults to /zap or the '
        'value of the environment variable ZAP_PATH.'
    ),
)
@click.option(
    '--zap-port',
    '-p',
    default=8090,
    envvar='ZAP_PORT',
    type=int,
    help=(
        'Port of the ZAP proxy. Defaults to 8090 or the value '
        'of the environment variable ZAP_PORT.'
    ),
)
@click.option(
    '--zap-url',
    default='http://127.0.0.1',
    envvar='ZAP_URL',
    type=str,
    help=(
        'The URL of the ZAP proxy. Defaults to http://127.0.0.1 '
        'or the value of the environment variable ZAP_URL.'
    ),
)
@click.option(
    '--zap-log',
    default='/tmp/zap.log',
    envvar='ZAP_LOG',
    type=str,
    help='File in which to save the ZAP output log file.'
)
@click.pass_context
def cli(
    ctx: Context,
    zap_executable: str,
    zap_port: int,
    zap_url: str,
    zap_log: str,
) -> None:
    ctx.obj = ZAPManager(
        zap_executable=zap_executable,
        zap_port=zap_port,
        zap_url=zap_url,
        zap_log=zap_log,
    )

cli.add_command(start_zap_daemon)
cli.add_command(shutdown_zap_daemon)
cli.add_command(check_status)
cli.add_command(report_group)
cli.add_command(show_passive_scanners)
cli.add_command(show_active_scanners)
cli.add_command(show_policies)
cli.add_command(run_attack)
