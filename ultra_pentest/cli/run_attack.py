# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import json

import click

from ultra_pentest.zap import ZAPManager
from ultra_pentest.zap.configurations import (
    Config,
    ContextConfig,
    AuthenticationConfig,
    UserConfig,
    PassiveScanConfig,
    SpiderConfig,
    ActiveScanConfig,
)
from ultra_pentest.helpers import zap_error_handler


def load_config(config_file: str) -> Config:
    with open(config_file, 'r') as file:
        config_parser = json.load(file)

    config = Config(
        context=ContextConfig(**config_parser['context']),
        authentication=AuthenticationConfig(**config_parser['authentication']),
        user=UserConfig(**config_parser['user']),
        passive_scan=PassiveScanConfig(**config_parser['passive_scan']),
        spider=SpiderConfig(**config_parser['spider']),
        active_scan=ActiveScanConfig(**config_parser['active_scan']),
    )

    return config

@click.command('run-attack', short_help='Start attack.')
@click.argument('url')
@click.option('-s', '--only-spider', is_flag=True, help='Run only Spider.')
@click.option('-g', '--generate-url-file', is_flag=True, help='Generate file of URLs found by the spider.')
@click.option('-a', '--only-active-scan', is_flag=True, help='Run only Active Scan.')
@click.option(
    '-c',
    '--config-file',
    type=click.Path(exists=True),
    required=True,
    help='File configuration.',
)
@click.pass_obj
def run_attack(
    zap_manager: ZAPManager,
    url: str,
    only_spider: str,
    generate_url_file: bool,
    only_active_scan: bool,
    config_file: str,
) -> None:
    config = load_config(config_file)

    with zap_error_handler():
        zap_manager.run_context(config.context)
        zap_manager.run_auth(config.authentication)
        zap_manager.run_user(config.user)
        zap_manager.run_session_management()
        zap_manager.run_passive_scan(config.passive_scan)
 
        if only_spider:
            run_spider(zap_manager, url, generate_url_file, config.spider)
            return

        if only_active_scan:
            zap_manager.open_url(url)
            run_active_scan(zap_manager, url, config.active_scan)
            return

        run_spider(zap_manager, url, generate_url_file, config.spider)
        zap_manager.run_active_scan(url, config.active_scan)

    click.echo('[+] The Security Test is over. You can now generate a complete report.')

def run_spider(
    zap_manager: ZAPManager,
    url: str,
    generate_url_file: bool,
    config: SpiderConfig
) -> None:
    try:
        zap_manager.run_spider(url, config)
    except KeyboardInterrupt:
        zap_manager.stop_spider()

    if generate_url_file:
        zap_manager.generate_url_file()

def run_active_scan(
    zap_manager: ZAPManager,
    url: str,
    config: ActiveScanConfig
) -> None:
    try:
        zap_manager.run_active_scan(url, config)
    except KeyboardInterrupt:
        zap_manager.stop_active_scan()