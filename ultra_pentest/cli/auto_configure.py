# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import json

import click

from ultra_pentest.zap import ZAPManager
from ultra_pentest.zap.components.authentication import Authentication
from ultra_pentest.zap.components.user import User
from ultra_pentest.zap.components.active_scan import ActiveScan
from ultra_pentest.zap.configurations import (
    Config,
    ContextConfig,
    AuthenticationConfig,
    UserConfig,
    PassiveScanConfig,
    SpiderConfig,
    ActiveScanConfig,    
)
from ultra_pentest.helpers import zap_error_handler


def load_config(config_file: str) -> Config:
    with open(config_file, 'r') as file:
        config_parser = json.load(file)
    return Config(
        context=ContextConfig(**config_parser['context']),
        authentication=AuthenticationConfig(**config_parser['authentication']),
        user=UserConfig(**config_parser['user']),
        passive_scan=PassiveScanConfig(**config_parser['passive_scan']),
        spider=SpiderConfig(**config_parser['spider']),
        active_scan=ActiveScanConfig(**config_parser['active_scan']),
    )

@click.command('auto-configure', short_help='Configure workspace with file.')
@click.argument('config_file')
@click.pass_obj
def auto_configure(zap_manager: ZAPManager, config_file: str) -> None:
    """Auto configure workspace."""
    config = load_config(config_file)

    with zap_error_handler():

        # ------- Context -------
    
        zap_manager.context.create(name=config.context.name)
        click.echo(
            '[+] Context created with name {name} and id {id}.'.format(
                name=zap_manager.context.name,
                id=zap_manager.context.id,
            )
        )

        regex_count = zap_manager.context.set_regexes(
            include_regexes=config.context.include_regexes,
            exclude_regexes=config.context.exclude_regexes,
        )
        click.echo(
            '[+] {regex_count} regexes included in context.'.format(
                regex_count=regex_count,
            )
        )

        tech_count = zap_manager.context.set_include_technologies(
            include_technologies=config.context.technologies,
        )
        click.echo(
            '[+] {tech_count} technologies included in context.'.format(
                tech_count=tech_count,
            )
        )


        # ------- Authentication -------
    
        zap_manager.authentication.set_auth_method(
            method='formBasedAuthentication',
            params=Authentication.build_query_string_for_form_based(
                login_url=config.authentication.login_url,
                login_request_data=config.authentication.login_request_data,
                login_page_url=config.authentication.login_page_url,
            ),
            context_id=zap_manager.context.id,
        )
        click.echo('[+] Auth method configured.')

        if config.authentication.logged_in_indicator:
            zap_manager.authentication.set_logged_in_indicator(
                logged_in_regex=config.authentication.logged_in_indicator,
                context_id=zap_manager.context.id,
            )
            click.echo(
                '[+] Logged In indicator "{logged_in_regex}" configured.'.format(
                    logged_in_regex=config.authentication.logged_in_indicator,
                )
            )
    
        if config.authentication.logged_out_indicator:
            zap_manager.authentication.set_logged_out_indicator(
                logged_out_regex=config.authentication.logged_out_indicator,
                context_id=zap_manager.context.id,
            )
            click.echo(
                '[+] Logged Out indicator "{logged_out_regex}" configured.'.format(
                    logged_out_regex=config.authentication.logged_out_indicator,
                )
            )


        # ------- User -------

        zap_manager.user.new_user(
            name=config.user.name,
            context_id=zap_manager.context.id,
        )
        click.echo(
            '[+] User with name {name} created.'.format(name=config.user.name)
        )

        zap_manager.user.set_enable(
            user_id=zap_manager.user.id,
            enable=config.user.enabled,
            context_id=zap_manager.context.id,
        )
        click.echo('[+] User has changed status.')

        zap_manager.user.set_auth_credentials(
            user_id=zap_manager.user.id,
            params=User.build_query_string_for_form_based(
                username=config.user.username,
                password=config.user.password,
            ),
            context_id=zap_manager.context.id,
        )
        click.echo('[+] User for form ready.')

        zap_manager.user.set_forced(
            user_id=zap_manager.user.id,
            context_id=zap_manager.context.id,
        )
        click.echo('[+] User has changed forced.')


        # ------- Session management -------

        zap_manager.session_management.set_session_mng_method(
            method='cookieBasedSessionManagement',
            context_id=zap_manager.context.id,
        )
        click.echo('[+] Session management ready.')


        # ------- Passive Scan -------

        if config.passive_scan.scanner_ids:
            scanner_ids = config.passive_scan.scanner_ids
            zap_manager.passive_scan.enable_scanners(scanner_ids=scanner_ids)
        else:
            zap_manager.passive_scan.enable_all_scanners()
            scanner_ids = zap_manager.passive_scan.get_all_scanners()
        click.echo('[+] Scanners for Passive Scan enabled.')

        zap_manager.passive_scan.set_alert_threshold(
            scanner_ids=scanner_ids,
            alert_threshold=config.passive_scan.scanner_threshold, 
        )
        click.echo('[+] Alert Threshold for Passive Scan scanners ready.')


        # ------- Spider -------

        zap_manager.spider.set_option_thread_count(config.spider.threads)
        zap_manager.spider.set_option_max_depth(config.spider.max_depth)
        zap_manager.spider.set_option_process_form(config.spider.process_form)
        zap_manager.spider.set_option_post_form(config.spider.post_form)


        # ------- Active Scan -------

        if config.active_scan.policy_ids:
            policy_ids = config.active_scan.policy_ids
        else:
            policies = zap_manager.active_scan.get_all_policies()
            policy_ids = [policy['id'] for policy in policies]

        zap_manager.active_scan.enable_policies(policy_ids)
        click.echo('[+] Policies for Active Scan enabled.')

        zap_manager.active_scan.set_policies_alert_threshold(
            policy_ids=policy_ids,
            policy_threshold=config.active_scan.policy_threshold,
        )
        click.echo('[+] Alert Threshold defined for Active Scan policies.')

        zap_manager.active_scan.set_policies_attack_strength(
            policy_ids=policy_ids,
            policy_strength=config.active_scan.policy_strength,
        )
        click.echo('[+] Attack Strength defined for Active Scan policies.')

        if config.active_scan.scanner_ids:
            scanner_ids = config.active_scan.scanner_ids
            zap_manager.active_scan.enable_scanners(scanner_ids=scanner_ids)
        else:
            zap_manager.active_scan.enable_all_scanners()
            scanner_ids = zap_manager.active_scan.get_all_scanners()
        click.echo('[+] Scanners for Active Scan enabled.')   

        zap_manager.active_scan.set_scanners_alert_threshold(
            scanner_ids=scanner_ids,
            scanner_threshold=config.active_scan.scanner_threshold,
        )
        click.echo('[+] Alert Threshold defined for Active Scan scanners.')

        zap_manager.active_scan.set_scanners_attack_strength(
            scanner_ids=scanner_ids,
            scanner_strength=config.active_scan.scanner_strength,
        )
        click.echo('[+] Attack Strength defined for Active Scan scanners.')

        zap_manager.active_scan.set_option_target_params_injectable(
            target_params_injectable=ActiveScan.calculate_target_params_injectable(
                target_query_string=config.active_scan.target_query_string,
                target_post_data=config.active_scan.target_post_data,
                target_cookie=config.active_scan.target_cookie,
                target_http_headers=config.active_scan.target_http_headers,
                target_url_path=config.active_scan.target_url_path,
            ),
        )

        zap_manager.active_scan.set_option_add_query_param(
            config.active_scan.add_query_param,
        )


    click.echo('[+] ZAP configured.')