# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os

import click
from tabulate import tabulate

from ultra_pentest.zap import ZAPManager
from ultra_pentest.zap.configurations import ReportConfig
from ultra_pentest.helpers import zap_error_handler, basedir_is_accesible


@click.group(name='reports', short_help='Manage reports.')
@click.pass_context
def report_group(ctx: click.core.Context) -> None:
    """Group of commands for manage reports."""
    pass

@report_group.command('templates')
@click.pass_obj
def list_templates(zap_manager: ZAPManager) -> None:
    """List of available templates."""
    with zap_error_handler():
        templates = zap_manager.report.get_templates()
        click.echo(
            tabulate(
                [[template] for template in templates],
                headers=['Template name'],
                tablefmt='grid',
            )
        )

@report_group.command('generate')
@click.argument('title')
@click.argument('template')
@click.option(
    '--description',
    '-d',
    type=str,
    default=None,
    help='Report description.',
)
@click.option(
    '--output-file',
    '-o',
    type=click.Path(dir_okay=False, writable=True),
    callback=basedir_is_accesible,
    help='The file name of the generated report.',
)
@click.option(
    '--display',
    is_flag=True,
    help='Display the generated report.',
)
@click.pass_obj
def generate_report(
    zap_manager: ZAPManager,
    title: str,
    template: str,
    description: str,
    output_file: str,
    display: bool,
) -> None:
    """Generate report."""

    path_directory, file_name = os.path.split(output_file)

    config = ReportConfig(
        title=title,
        template=template,
        description=description,
        file_name=file_name,
        path_directory=path_directory,
        display=display,
    )

    with zap_error_handler():
        result = zap_manager.report.generate(config)
        click.echo(f'[+] Report output: {result}')
