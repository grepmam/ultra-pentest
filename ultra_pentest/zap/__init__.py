# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import time
import platform
import subprocess

import requests
from requests.exceptions import RequestException
from zapv2 import ZAPv2

from ultra_pentest.zap.components.context import Context
from ultra_pentest.zap.components.authentication import Authentication
from ultra_pentest.zap.components.user import User
from ultra_pentest.zap.components.session_management import SessionManagement
from ultra_pentest.zap.components.passive_scan import PassiveScan
from ultra_pentest.zap.components.spider import Spider
from ultra_pentest.zap.components.active_scan import ActiveScan
from ultra_pentest.zap.components.report import Report
from ultra_pentest.zap.configurations import (
    ActiveScanConfig,
    AuthenticationConfig,
    ContextConfig,
    PassiveScanConfig,
    ReportConfig,
    SpiderConfig,
    UserConfig,
)
from ultra_pentest.zap.exceptions import ZAPError


class ZAPManager:

    def __init__(
        self,
        zap_executable: str,
        zap_url: str,
        zap_port: int,
        zap_log: str,
    ) -> None:
        if not os.path.isfile(zap_executable):
            raise ZAPError(f'[x] ZAP was not found in "{zap_executable}".')
        self._executable = zap_executable

        self._proxy_url = f'{zap_url}:{zap_port}'
        self._port = zap_port
        self._log_file = zap_log

        self._zap = ZAPv2(
            proxies={
                'http': self._proxy_url,
                'https': self._proxy_url,
            },
        )

        self._context = Context(zap=self._zap)
        self._authentication = Authentication(zap=self._zap)
        self._user = User(zap=self._zap)
        self._session_management = SessionManagement(zap=self._zap)
        self._passive_scan = PassiveScan(zap=self._zap)
        self._spider = Spider(zap=self._zap)
        self._active_scan = ActiveScan(zap=self._zap)
        self._report = Report(zap=self._zap)

    def start(self) -> None:
        """Start the ZAP Daemon."""
        zap_command = [
            self._executable,
            '-daemon',
            '-port',
            str(self._port),
            '-config',
            'api.disablekey=true',
        ]

        with open(self._log_file, 'w+') as log_file:
            subprocess.Popen(
                zap_command,
                cwd=os.path.dirname(self._executable),
                stdout=log_file,
                stderr=subprocess.STDOUT
            )

        self._wait_for_zap()

    def shutdown(self) -> None:
        """Shutdown ZAP."""
        self._zap.core.shutdown()
        self._wait_for_zap()

    def _wait_for_zap(self) -> None:
        """Wait for ZAP to be ready to receive API calls."""
        timeout_time = time.time() + 60
        while not self.is_running():
            if time.time() > timeout_time:
                raise ZAPError('[x] Timed out waiting for ZAP.')
            time.sleep(2)

    def is_running(self) -> bool:
        """Check if ZAP is running."""
        try:
            result = requests.get(self._proxy_url)
        except RequestException:
            return False

        if 'ZAP-Header' not in result.headers.get('Access-Control-Allow-Headers', []):
            raise ZAPError('[x] Another process is listening on {0}'.format(self._proxy_url))

        return True

    def open_url(self, url: str) -> None:
        """Access a URL through ZAP."""
        self._zap.urlopen(url)
        # Give the sites tree a chance to get updated
        time.sleep(3)

    def show_report_templates(self) -> None:
        self._report.show_report_templates()

    def generate_report(self, config: ReportConfig) -> None:
        self._report.generate(config) 

    def show_passive_scanners(self) -> None:
        self._passive_scan.show_scanners()

    def show_active_scanners(self) -> None:
        self._active_scan.show_scanners()

    def show_policies(self) -> None:
        self._active_scan.show_policies()

    def run_context(self, config: ContextConfig) -> None:
        self._context.create(name=config.name)
        self._context.set_regexes(
            include_regexes=config.include_regexes,
            exclude_regexes=config.exclude_regexes,
        )
        self._context.set_include_technologies(
            include_technologies=config.technologies,
        )

    def run_auth(self, config: AuthenticationConfig) -> None:
        self._authentication.set_auth_method(
            method='formBasedAuthentication',
            params=Authentication.build_query_string_for_form_based(
                login_url=config.login_url,
                login_request_data=config.login_request_data,
                login_page_url=config.login_page_url,
            ),
            context_id=self._context.id,
        )

        if config.logged_in_indicator:
            self._authentication.set_logged_in_indicator(
                logged_in_regex=config.logged_in_indicator,
                context_id=self._context.id,
            )

        if config.logged_out_indicator:
            self._authentication.set_logged_out_indicator(
                logged_out_regex=config.logged_out_indicator,
                context_id=self._context.id,
            )

    def run_user(self, config: UserConfig) -> None:
        self._user.new_user(
            name=config.name,
            context_id=self._context.id,
        )

        self._user.set_enable(
            user_id=self._user.id,
            enable=config.enabled,
            context_id=self._context.id,
        )

        self._user.set_auth_credentials(
            user_id=self._user.id,
            params=User.build_query_string_for_form_based(
                username=config.username,
                password=config.password,
            ),
            context_id=self._context.id,
        )

        self._user.set_forced(
            user_id=self._user.id,
            context_id=self._context.id,
        )

    def run_session_management(self) -> None:
        self._session_management.set_session_mng_method(
            method='cookieBasedSessionManagement',
            context_id=self._context.id,
        )

    def run_passive_scan(self, config: PassiveScanConfig) -> None:
        if config.scanner_ids:
            scanner_ids = config.scanner_ids
            self._passive_scan.enable_scanners(scanner_ids=scanner_ids)
        else:
            self._passive_scan.enable_all_scanners()
            scanner_ids = self._passive_scan.get_all_scanners()

        self._passive_scan.set_alert_threshold(
            scanner_ids=scanner_ids,
            alert_threshold=config.scanner_threshold, 
        )

    def run_spider(self, url: str, config: SpiderConfig) -> None:
        self._spider.scan_as_user(
            target_url=url,
            user_id=self._user.id,
            context_id=self._context.id,
            config=config,
        )

    def run_active_scan(self, url: str, config: ActiveScanConfig) -> None:
        if config.policy_ids:
            policy_ids = config.policy_ids
        else:
            policies = self._active_scan.get_all_policies()
            policy_ids = [policy['id'] for policy in policies]

        self._active_scan.enable_policies(policy_ids)
        self._active_scan.set_policies_alert_threshold(
            policy_ids=policy_ids,
            policy_threshold=config.policy_threshold,
        )
        self._active_scan.set_policies_attack_strength(
            policy_ids=policy_ids,
            policy_strength=config.policy_strength,
        )

        if config.scanner_ids:
            scanner_ids = config.scanner_ids
            self._active_scan.enable_scanners(scanner_ids=scanner_ids)
        else:
            self._active_scan.enable_all_scanners()
            scanner_ids = self._active_scan.get_all_scanners()

        self._active_scan.set_scanners_alert_threshold(
            scanner_ids=scanner_ids,
            scanner_threshold=config.scanner_threshold,
        )
        self._active_scan.set_scanners_attack_strength(
            scanner_ids=scanner_ids,
            scanner_strength=config.scanner_strength,
        )

        self._active_scan.scan_as_user(
            target_url=url,
            user_id=self._user.id,
            context_id=self._context.id,
            recurse=config.recurse,
            target_params_injectable=ActiveScan.calculate_target_params_injectable(
                target_query_string=config.target_query_string,
                target_post_data=config.target_post_data,
                target_cookie=config.target_cookie,
                target_http_headers=config.target_http_headers,
                target_url_path=config.target_url_path,
            ),
            add_query_param=config.add_query_param,
        )
