# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import time
from typing import Optional

from zapv2 import ZAPv2
from pwn import log

from ultra_pentest.zap.exceptions import ZAPError


class ActiveScan:

    status_check_sleep = 10   

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap
        self._scan_id = None

    def get_all_policies(self) -> list:
        return self._zap.ascan.policies()

    def enable_policies(self, policy_ids: list) -> None:
        result = self._zap.ascan.set_enabled_policies(
            ','.join(policy_ids),
        )
        if result != 'OK':
            raise ZAPError(f'[x] Policies for Active Scan could not be enabled: {result}.')

    def set_policies_alert_threshold(
        self,
        policy_ids: list,
        policy_threshold: str,
    ) -> None:
        for policy_id in policy_ids:
            self._zap.ascan.set_policy_alert_threshold(
                id=policy_id,
                alertthreshold=policy_threshold,
            )

    def set_policies_attack_strength(
        self,
        policy_ids: list,
        policy_strength: str,
    ) -> None:
        for policy_id in policy_ids:
            self._zap.ascan.set_policy_attack_strength(
                id=policy_id,
                attackstrength=policy_strength,
            )

    def enable_scanners(self, scanner_ids: list) -> None:
        self._zap.ascan.disable_all_scanners()

        result = self._zap.ascan.enable_scanners(
            ','.join(scanner_ids),
        )
        if result != 'OK':
            raise ZAPError(f'[x] Scanners for Active Scan could not be enabled: {result}.')

    def enable_all_scanners(self) -> None:
        self._zap.ascan.enable_all_scanners()

    def get_all_scanners(self) -> list:
        return self._zap.ascan.scanners()

    def stop_all_scans(self):
        self._zap.ascan.stop_all_scans()

    def remove_all_scans(self):
        self._zap.ascan.remove_all_scans()

    def set_scanners_alert_threshold(
        self,
        scanner_ids: list,
        scanner_threshold: str,
    ) -> None:
        for scanner_id in scanner_ids:
            self._zap.ascan.set_scanner_alert_threshold(
                id=scanner_id,
                alertthreshold=scanner_threshold,
            )

    def set_scanners_attack_strength(
        self,
        scanner_ids: list,
        scanner_strength: str,
    ) -> None:
        for scanner_id in scanner_ids:
            self._zap.ascan.set_scanner_attack_strength(
                id=scanner_id,
                attackstrength=scanner_strength,
            )

    def set_option_target_params_injectable(self, target_params_injectable: int) -> None:
        self._zap.ascan.set_option_target_params_injectable(target_params_injectable)

    def set_option_add_query_param(self, add_query_param: bool) -> None:
        self._zap.ascan.set_option_add_query_param(add_query_param)

    def scan(
        self,
        target_url: str,
        recurse: bool,
        user_id: Optional[int] = None,
        context_id: Optional[int] = None,
    ) -> None:
        if user_id and context_id:
            scan_id = self._zap.ascan.scan_as_user(
                url=target_url,
                contextid=context_id,
                userid=user_id,
                recurse=recurse,
            )
        else:
            scan_id = self._zap.ascan.scan(
                url=target_url,
                recurse=recurse,
            )

        if not scan_id.isdigit():
            raise ZAPError(f'[x] Error running active scan: {scan_id}')

        self._scan_id = scan_id

        self._check_status()

    def _check_status(self) -> None:
        as_progress = log.progress("")
        as_scan_status = int(self._zap.ascan.status(scanid=self._scan_id))
        while as_scan_status < 100:
            as_progress.status(f"Active Scan Progress: {as_scan_status}%")
            time.sleep(self.status_check_sleep)
            as_scan_status = int(self._zap.ascan.status(scanid=self._scan_id))

    def stop(self) -> None:
        self._zap.ascan.stop(self._scan_id)

    @staticmethod
    def calculate_target_params_injectable(
        target_query_string: bool,
        target_post_data: bool,
        target_cookie: bool,
        target_http_headers: bool,
        target_url_path: bool,
    ) -> int:
        target_params_injectable = 0

        if target_query_string:
            target_params_injectable += 1

        if target_post_data:
            target_params_injectable += 2

        if target_cookie:
            target_params_injectable += 4

        if target_http_headers:
            target_params_injectable += 8
    
        if target_url_path:
            target_params_injectable += 16

        return target_params_injectable 
