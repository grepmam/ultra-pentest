# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from zapv2 import ZAPv2

from ultra_pentest.zap.exceptions import ZAPError


class PassiveScan:

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap

    def get_all_scanners(self) -> list:
        return self._zap.pscan.scanners

    def enable_all_scanners(self) -> None:
        self._zap.pscan.enable_all_scanners()

    def enable_scanners(self, scanner_ids: list) -> None:
        self._zap.pscan.disable_all_scanners()

        result = self._zap.pscan.enable_scanners(
            ','.join(scanner_ids),
        )
        if result != 'OK':
            raise ZAPError(f'[x] Scanners for Passive Scan could not be enabled: {result}.')

    def set_alert_threshold(
        self,
        scanner_ids: list,
        alert_threshold: str,
    ) -> None:
        for scanner_id in scanner_ids:
            self._zap.pscan.set_scanner_alert_threshold(
                id=scanner_id,
                alertthreshold=alert_threshold,
            )