# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import time

import click
from zapv2 import ZAPv2

from ultra_pentest.zap.configurations import SpiderConfig
from ultra_pentest.zap.exceptions import ZAPError


class Spider:

    status_check_sleep = 10

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap

    def scan_as_user(
        self,
        target_url: str,
        user_id: int,
        context_id: int,
        config: SpiderConfig
    ) -> None:
        self._zap.spider.set_option_thread_count(config.threads)
        self._zap.spider.set_option_max_depth(config.max_depth)
        self._zap.spider.set_option_process_form(config.process_form)
        self._zap.spider.set_option_post_form(config.post_form)

        scan_id = self._zap.spider.scan_as_user(
            url=target_url,
            userid=user_id,
            contextid=context_id,
        )

        if not scan_id:
            raise ZAPError('[x] Error running spider.')

        if not scan_id.isdigit():
            raise ZAPError(f'[x] Error running spider: "{scan_id}"')

        click.echo('[+] The Spider has been launched into the field.')
        click.echo('[*] The Spider could take a minutes.')
        self._check_status()
        click.echo('[+] Spider completed.')

    def _check_status(self) -> None:
        while int(self._zap.spider.status()) < 100:
            time.sleep(self.status_check_sleep)
