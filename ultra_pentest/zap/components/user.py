# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from zapv2 import ZAPv2

from ultra_pentest.zap.exceptions import ZAPError


class User:

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap

    @property
    def id(self):
        context_name = self._zap.context.context_list[-1]
        context_id = self._zap.context.context(context_name)['id']
        return self._zap.users.users_list(context_id)[0]['id']

    @staticmethod
    def build_query_string_for_form_based(
        username: str,
        password: str,
    ) -> str:
        return f'username={username}&password={password}',

    def new_user(self, name: str, context_id: int) -> None:
        self._zap.users.new_user(
            contextid=context_id,
            name=name,
        )

    def set_enable(
        self,
        user_id: int,
        enable: bool,
        context_id: int
    ) -> None:
        result = self._zap.users.set_user_enabled(
            contextid=context_id,
            userid=user_id,
            enabled=enable,
        )
        if result != 'OK':
            raise ZAPError(f'[x] Error changing user status: {result}.')

    def set_auth_credentials(
        self,
        user_id: int,
        params: str,
        context_id: int,
    ) -> None:
        result = self._zap.users.set_authentication_credentials(
            contextid=context_id,
            userid=user_id,
            authcredentialsconfigparams=params,
        )
        if result != 'OK':
            raise ZAPError(f'[x] Error configuring user for form: {result}')

    def set_forced(self, user_id: int, context_id: int) -> None:
        result = self._zap.forcedUser.set_forced_user(
            contextid=context_id,
            userid=user_id,
        )
        if result != 'OK':
            raise ZAPError(f'[x] Error changing user forced: {result}')
