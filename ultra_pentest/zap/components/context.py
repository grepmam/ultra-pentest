# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import click
from zapv2 import ZAPv2

from ultra_pentest.zap.exceptions import ZAPError


class Context:

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap
        self._id = None
        self._name = None

    @property
    def id(self) -> int:
        return self._id

    def create(self, name: str) -> None:
        result = self._zap.context.new_context(name)
        if result == 'already_exists':
            self._zap.context.remove_context(name)
            result = self._zap.context.new_context(name)

        self._id = result
        self._name = name
        click.echo(f'[+] Context created with name {self._name} and id {self._id}.')

    def set_regexes(self, include_regexes: list, exclude_regexes: list) -> None:
        result = self._zap.context.set_context_regexs(
            contextname=self._name,
            incregexs=str(include_regexes),
            excregexs=str(exclude_regexes),
        )
        if result != 'OK':
            raise ZAPError(f'[x] Error when including regexs: {result}.')

        regex_count = len(include_regexes) + len(exclude_regexes)
        click.echo(f'[+] {regex_count} regexes included in context.')

    def set_include_technologies(self, include_technologies: list) -> None:
        self._zap.context.exclude_all_context_technologies(self._name)
        technologies = ",".join(include_technologies)
        result = self._zap.context.include_context_technologies(
            contextname=self._name,
            technologynames=technologies,
        )
        if result != 'OK':
             raise ZAPError(f'[x] Error when including technologies: {result}.')

        technologies_count = len(include_technologies)
        click.echo(f'[+] {technologies_count} technologies included in context.')
