# The MIT License (MIT)
#
# Copyright (c) 2024 Marco Martel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from urllib.parse import quote

import click
from zapv2 import ZAPv2

from ultra_pentest.zap.exceptions import ZAPError


class Authentication:

    def __init__(self, zap: ZAPv2) -> None:
        self._zap = zap

    @staticmethod
    def build_query_string_for_form_based(
        login_url: str,
        login_request_data: str,
        login_page_url: str,
    ) -> str:
        if not login_url:
            raise ZAPError('[x] There is no login_url for the form.')

        form_based_params = [f'loginUrl={quote(login_url)}']

        if login_request_data:
            form_based_params.append(f'loginRequestData={quote(login_request_data)}')

        if login_page_url:
            form_based_params.append(f'loginPageUrl={quote(login_page_url)}')

        return '&'.join(form_based_params)

    def set_auth_method(
        self,
        method: str,
        params: str,
        context_id: int,
    ) -> None:
        result = self._zap.authentication.set_authentication_method(
            contextid=context_id,
            authmethodname=method,
            authmethodconfigparams=params,
        )
        if result != 'OK':
            raise ZAPError('[x] Error configuring authentication.')

        click.echo(f'[+] Auth method configured.')

    def set_logged_in_indicator(
        self,
        logged_in_regex: str,
        context_id: int,
    ) -> None:
        result = self._zap.authentication.set_logged_in_indicator(
            contextid=context_id,
            loggedinindicatorregex=logged_in_regex,
        )
        if result != 'OK':
            raise ZAPError(
                f'[x] An error occurred while setting the Logged In indicator: {result}'
            )

        click.echo(f'[+] Logged In indicator "{logged_in_regex}" configured.')

    def set_logged_out_indicator(
        self,
        logged_out_regex: str,
        context_id: int,
    ) -> None:
        result = self._zap.authentication.set_logged_out_indicator(
            contextid=context_id,
            loggedoutindicatorregex=logged_out_regex,
        )
        if result != 'OK':
            raise ZAPError(
                f'[x] An error occurred while setting the Logged Out indicator: {result}'
            )

        click.echo(f'[+] Logged Out indicator "{logged_out_regex}" configured.')
